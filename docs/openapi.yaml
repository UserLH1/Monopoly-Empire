openapi: 3.0.3
info:
  title: Monopoly Empire API
  version: 1.0.0
servers:

  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/uvt-636/empire/1.0.0
  - url: http://localhost:8080
    description: Local server

tags:
  - name: joc
    description: Toate informatiile despre joc
  
  - name: utilizator
    description: Toate informatiile despre utilizator
    
  - name: card
    description: Toate informatiile despre carduri
    
  - name: turn
    description: Toate informatiile despre turnuri
    
    
paths:
  /api/jocuri:
    get:
      tags:
        - joc
      summary: Returnam toate jocurile
      description: Returnam toate jocurile
      operationId: getGames
      responses:
        '200':
          description: Jocurile au fost returnate cu succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Joc'          
    post:
      tags:
        - joc
      summary: Adaugarea unui joc nou
      description: Crearea unui joc prin specificarea numarului de jucatori. Se va genera un id al jocului si se va adauga jucatorul care a creat jocul in lista cu jucatori, de asemnea statusul jocului va fi "WATING"
      operationId: creareJoc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Joc-creareJoc'
        required: true
      responses:
        '200':
          description: Jocul a fost creat cu succes
  /api/jucatori:
    get:
      tags:
        - utilizator
      summary: Returnam toti jucatorii
      description: Returnam toti jucatorii
      operationId: getPlayers
      responses:
        '200':
          description: Jucatorii au fost returnati cu succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - utilizator
      summary: Creare cont utilizator
      description: Creare cont utilizator
      operationId: createUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizator-creareCont'
      responses:
        "200" :
          description: Utilizatorul a fost creat cu succes
        '400':
          description: Acest username este deja utilizat de catre o alta persoana
  /api/jocuri/{idJoc}:
    get:
      tags:
        - joc
      summary: Gaseste jocul in functie de id-ul acestia
      description: Returnam datele despre jocul corespunzator id-ulu specificat
      operationId: findGameById
      parameters:
        - name: idJoc
          in: path
          description: id-ul jocului (numar intreg pozitiv)
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Jocul a fost returnat cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joc'          
        '400':
          description: Invalid id
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /api/jocuri/alaturareJoc:
    put:
      tags:
        - joc
      summary: Adaugarea unui jucator la un joc
      description: Adaugarea unui jucator la un joc folosind username-ul jucatorului si id-ul jocului
      operationId: actualizareJoc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Joc-alaturareJoc'
        required: true
      responses:
        '200':
          description: Jucator adaugat cu succes
        '404':
          description: Id-ul jocului nu a fost gasit.Username-ul jucatorului nu a fost gasit.
  /api/jocuri/{idJoc}/jucatori:
    get:
      tags:
        - joc
      summary: Retruneaza toti jucatorii unui joc
      description: Retruneaza toti jucatorii unui joc
      operationId: getGamePlayers
      parameters:
        - name: idJoc
          in: path
          description: id-ul jocului (numar intreg pozitiv)
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Jucatorii au fost returnati cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joc-returnareJucatoriJoc'          
        '400':
          description: Invalid id
  /api/jocuri/{idJoc}/turnuri:
    get:
      tags:
        - joc
      summary: Afisarea detaliilor despre turnul jucatorilor din jocul cu id-ul specificat
      operationId: listTurnJoc
      parameters:
        - name: idJoc
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Descriere turn
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/Turn'
        '404':
          description: Jocul nu a fost gasit
          
  /api/jocuri/{idJoc}/carduri:
    get:
      tags:
        - joc
      summary: Extragerea informatiilor despre toate cardurile pe care le detin toti jucatorii din jocul cu id-ul specificat
      description: Extragerea informatiilor despre toate cardurile pe care le detin toti jucatorii din jocul cu id-ul specificat
      operationId: getCardsByGameId
      parameters:
        - name: idJoc
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalii despre carduri returnate cu succes
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CarduriActiveByUsername'
        '404':
          description: Username-ul jucatorului nu a fost gasit.
          
  /api/jocuri/{idJoc}/panouri:
    get:
      tags:
        - joc
      summary: Returneaza toate panourile cumparate intr-un joc
      description: Returneaza toate panourile cumparate intr-un joc
      operationId: listPanouCumparat
      parameters:
        - name: idJoc
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista panourilor cumparate
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Panou'
        '404':
          description: Jocul nu a fost gasit
  /api/jucatori/login:
    post:
      tags:
        - utilizator
      summary: Logarea utilizatorului în joc
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: popraluca
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Utilizatorul s-a autentificat cu succes
        '400':
          description: Nume de utilizator sau parolă greșite

  /api/jucatori/{username}/pozitiePion:
    get:
      tags:
        - utilizator
      summary: Extragem pozitia pionului utilizatorului specificat
      description: Extragem pozitia pionului utilizatorului specificat
      operationId: getUserPositionByName
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-pozitiePion'          
        '404':
          description: Nu s-a gasit un utilizator cu acest username
  /api/jucatori/pozitiePion:
    put:
      tags:
          - utilizator
      summary: Schimbarea pozitiei pionului utilizatorului
      description: Schimbarea pozitiei pionului utilizatorului
      operationId: modifyUserPosition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizator-modificarePozitiePion'
      responses:
        "200" :
          description: Pozitia a fost modificata cu succes
        '400':
          description: Pozitie invalida
        "404":
          description: Username neidentificat
  /api/jucatori/{username}/sumaBani:
    get:
      tags:
        - utilizator
      summary: Extragem suma de bani a utilizatorului specificat
      description: Extragem suma de bani a utilizatorului specificat
      operationId: getUserMoney
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Suma de bani a fost extrasa cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizator-getMoney'          
        '404':
          description: Nu s-a gasit un utilizator cu acest username
  /api/jucatori/sumaBani:
    put:
      tags:
        - utilizator
      summary: Modificam suma de bani a unui jucator
      description: Modificam suma de bani a unui jucator
      operationId: updateUserMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizator-updateMoney'
      responses:
        "200" :
          description: Suma de bani a fost modificata cu succes
        "400" :
          description: Suma de bani invalida
        "404" : 
          description: Utilizatorul nu a fost gasit
  /api/jucatori/{username}/idJoc:
    get:
      tags:
        - utilizator
      summary: Extragem id-ul jocului in care joaca utilizatorul specificat
      description: Extragem id-ul jocului in care joaca utilizatorul specificat
      operationId: getUserGameId
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Id-ul jocului a fost extras cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizator-getIdJoc'          
        '404':
          description: Nu s-a gasit un utilizator cu acest username
  /api/jucatori/{username}:
    get:
      tags:
        - utilizator
      summary: Extragem informatiile despre utilizatorul care are username-ul specificat
      description: Extragem informatiile despre utilizatorul care are username-ul specificat
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '404':
          description: Nu s-a gasit un utilizator cu acest username
    delete:
      tags:
        - utilizator
      summary: Stergem utilizatorul cu acest username
      description: Stergem utilizatorul cu acest username.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Utilizator sters cu succes
        '404':
          description: Acest utilizator nu a fost gasit
  
  /api/card:
    post:
      tags:
        - card
      summary: Câștigarea unui card (Șansă sau Empire)
      description: În momentul în care un utilizator se află pe o poziție de câștig a unui card (empire/sansa), se returnează un card din categoria coresponzatoare.
      operationId: castigareIdCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card-Castigare'
      responses:
        '200':
          description: Card câștigat
  /api/carduri:
    get:
      tags:
        - card
      summary: Extragera tutoror cadruilor active sau inactive din toate jocurile
      description: Extragera tutoror cadruilor active sau inactive din toate jocurile
      operationId: getCards
      responses:
        '200':
          description: Carduri returnate cu succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarduriActive'  
  /api/card/{status}/{idCard}:
    get:
      tags:
        - card
      summary: Extragerea informatiilor despre cardul corespunzator id-ului specificat
      description: Extragerea informatiilor despre cardul corespunzator id-ului specificat
      operationId: getCardById
      parameters:
        - name: idCard
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalii despre card returnate cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarduriActiveById'
        '404':
          description: Id-ul cardului nu a fost gasit.
  /api/carduri/utilizator/{username}:
    get:
      tags:
        - card
      summary: Extragerea informatiilor despre toate cardurile pe care le detine jucatorul cu username-ul specificat
      description: Extragerea informatiilor despre toate cardurile pe care le detine jucatorul cu username-ul specificat
      operationId: getActiveCardsByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalii despre carduri returnate cu succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarduriActiveByUsername'
        '404':
          description: Username-ul jucatorului nu a fost gasit.
  
  /api/card/utilizeazaCard:
    post:
      tags:
        - card
      summary: Utilizarea unui card (Șansă sau Empire)
      description: În momentul în care un jucator doreste sa utilizeze un card se vor realiza anumite actiuni ulterioare in functie de descrierea cardului
      operationId: utilizareCardActiv
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card-utilieazaCard'
      responses:
        '200':
          description: Card a fost utilizat cu succes
        '404':
          description: Utilizator sau cardActiv neidentificat

  /api/panouri/{status}:
    get:
      tags:
        - panou
      summary: Returneaza toate panourile ce se pot folosi intr-un joc
      description: Returneaza toate panourile ce se pot folosi intr-un joc
      operationId: listPanou
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista panourilor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Panou'
  /api/panouri/{status}/{idPanou}:
    get:
      tags:
        - panou
      summary: Detalii despre un panou
      operationId: getPanou
      parameters:
        - name: idPanou
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalii panou
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Panou'
        '404':
          description: Nu există acest panou
  /api/panou:
    post:
      tags:
        - panou
      summary: Adaugarea unui panou cumparat
      description: Adaugarea unui panou cumparat in lista cu panouri cumparate
      operationId: adaugarePanou
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Panou-Cumparat-adaugare'
      responses:
        '200':
          description: Panou cumparat adaugat cu succes
        '404':
          description: Username, Turn sau panou neidentificat
        '400':
          description: Pretul panoului este prea mare
  
  /api/turnuri:
    get:
      tags:
        - turn
      summary: Listare turnuri ale jucătorilor
      operationId: listTurn
      responses:
        '200':
          description: Lista turnurilor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Turn'
        
  /api/turnuri/{username}:
    get:
      tags:
        - turn
      summary: Afisarea detaliilor despre turnul jucatorului cu username-ul specificat
      operationId: listTurnJucator
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Descriere turn
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/Turn' 
        '404':
          description: Utilizatorul nu a fost gasit

  /api/turnuri/{idTurn}/panouri:
    get:
      tags:
        - turn
      summary: Returneaza toate panourile cumparate intr-un turn
      description: Returneaza toate panourile cumparate intr-un turn
      operationId: listPanouCumparatTurn
      parameters:
        - name: idTurn
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista panourilor cumparate
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Panou'
        '404':
          description: Turnul nu a fost gasit
  
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: popraluca
        numarJocuriCastigate:
          type: integer
          format: int64
          example: 10
        idJoc:
          type: integer
          example: 23
        sumaBani:
          type: integer
          example: 700 
        pozitiePion:
          type: integer
          example: 12
    User-pozitiePion:
      type: object
      properties:
        pozitiePion:
          type: integer
          example: 12
    Utilizator-modificarePozitiePion:
      type: object
      properties:
        username:
          type: string
          example: popraluca
        pozitiePion:
          type: integer
          example: 12
    Utilizator-getMoney:
      type: object
      properties:
        sumaBani:
          type: integer
          example: 450
    Utilizator-updateMoney:
      type: object
      properties:
        username:
          type: string
          example: popraluca
        sumaBani:
          type: integer
          example: 300
    Utilizator-updateIdJoc:
      type: object
      properties:
        username:
          type: string
          example: popraluca
        idJoc:
          type: integer
          example: 3
    Utilizator-getIdJoc:
      type: object
      properties:
        idJoc:
          type: integer
          example: 4
    Utilizator-creareCont:
      type: object
      properties:
        username:
          type: string
          example: popraluca
        password:
          type: string
          example: '1ffdA5cdfsh!@rs'
    Joc:
      type: object
      properties:
        idJoc:
          type: integer
          format: int64
          example: 10
        nrJucatori:
          type: integer
          format: int64
          example: 10
        jucatori:
          type: string
          example: ralucapop;adrianalivadariu
        statusJoc:
          type: string
          example: WATING
    Joc-alaturareJoc:
      required:
        - idJoc
        - username
      type: object
      properties:
        idJoc:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: ralucapop
    Joc-creareJoc:
      required:
        - username
      type: object
      properties:
        numarJucatori:
          type: integer
          format: int64
          example: 3
        username:
          type: string
          example: ralucapop
    Joc-returnareJoc:
      type: object
      properties:
        idJoc:
          type: integer
          format: int64
          example: 10
        numarJucatori:
          type: integer
          format: int64
          example: 10
        jucatori:
          type: string
          example: ralucapop;adrianalivadariu
        status:
          type: string
          example: WATING
    Joc-returnareJucatoriJoc:
      type: object
      properties:
        jucatori:
          type: string
          example: ralucapop;adrianalivadariu
    Card-Castigare:
      type: object
      properties:
        idCard:
          type: integer
          example: 3
        username:
          type: string
          example: popraluca
        idJoc:
          type: integer
          example: 2
    CarduriActive:
      type: object
      properties:
        descriereCard:
          type: string
          example: "Mergi la inchisoare"
        username:
          type: string
          example: popraluca
        cardType:
          type: string
          enum: [sansa, empire]
          example: "sansa"
        idJoc:
          type: integer
          example: 2
        status:
          type: string
          enum: [activ, inactiv]
          example: "activ"
    Carduri:
      type: object
      properties:
        descriereCard:
          type: string
          example: "Mergi la inchisoare"
        cardType:
          type: string
          enum: [sansa, empire]
          example: "sansa"
        idCard:
          type: integer
          example: 2
    CarduriById:
      type: object
      properties:
        descriereCard:
          type: string
          example: "Mergi la inchisoare"
        cardType:
          type: string
          enum: [sansa, empire]
          example: "sansa"
        idCard:
          type: integer
          example: 2

    CarduriActiveById:
      type: object
      properties:
        descriereCard:
          type: string
          example: "Mergi la inchisoare"
        username:
          type: string
          example: popraluca
        cardType:
          type: string
          enum: [sansa, empire]
          example: "sansa"
        idJoc:
          type: integer
          example: 2
    CarduriActiveByUsername:
      type: object
      properties:
        descriereCard:
          type: string
          example: "Mergi la inchisoare"
        username:
          type: string
          example: popraluca
        cardType:
          type: string
          enum: [sansa, empire]
          example: "sansa"
        idJoc:
          type: integer
          example: 2
    Card-utilieazaCard:
      type: object
      properties:
        idCardActiv:
          type: integer
          example: 4
        username:
          type: string
          example: popraluca
    Panou:
      type: object
      properties:
        idPanou:
          type: integer
          format: int64
          example: 10
        nume:
          type: string
          example: "McDonalds"
        pret:
          type: integer
          format: int64
          example: 100
        status:
          type: string
          enum: [activ, inactiv, general]
          example: "activ"
        idTurn:
          type: integer
          format: int64
          example: 10
    Panou-Cumparat:
      type: object
      properties:
        idPanouCumparat:
          type: integer
          format: int64
          example: 10
        idPanou:
          type: integer
          format: int64
          example: 10
        idJoc:
          type: integer
          format: int64
          example: 10
        idTurn:
          type: integer
          format: int64
          example: 10
        nume:
          type: string
          example: "McDonalds"
        pret:
          type: integer
          format: int64
          example: 100
    
    Panou-Cumparat-adaugare:
      type: object
      properties:
        idPanou:
          type: integer
          format: int64
          example: 10
        idJoc:
          type: integer
          format: int64
          example: 10
        idTurn:
          type: integer
          format: int64
          example: 10
    Returnare-Carduri:
      type: object
      properties:
        ststusCard:
          type: string
          enum: [activ, inactiv]
          example: "activ"      

      
    Turn:
      type: object
      properties:
        idTurn:
          type: integer
          format: int64
          example: 10        
        username:
          type: string
          example: "popraluca"
        idJoc:
          type: integer
          format: int64
          example: 10
        valoareTurn:
          type: integer
          format: int64
          example: 100

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header